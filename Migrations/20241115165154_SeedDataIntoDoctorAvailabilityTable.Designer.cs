// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assestment_JuaJoseZapata.Data;

#nullable disable

namespace assestment_JuaJoseZapata.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115165154_SeedDataIntoDoctorAvailabilityTable")]
    partial class SeedDataIntoDoctorAvailabilityTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.Doctor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("UserId");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Status = "available"
                        });
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.DoctorAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("weekday");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctors_availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            EndTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(14)),
                            StartTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(6)),
                            WeekDay = "monday"
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            EndTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(14)),
                            StartTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(6)),
                            WeekDay = "tuesday"
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 1,
                            EndTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(14)),
                            StartTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(6)),
                            WeekDay = "wednesday"
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 1,
                            EndTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(14)),
                            StartTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(6)),
                            WeekDay = "thursday"
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            EndTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(14)),
                            StartTime = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(10)),
                            WeekDay = "friday"
                        });
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.Patient", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserId");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            UserId = 2
                        });
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 11, 15, 11, 51, 54, 110, DateTimeKind.Local).AddTicks(1784),
                            Name = "doctor"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 11, 15, 11, 51, 54, 110, DateTimeKind.Local).AddTicks(1827),
                            Name = "patient"
                        });
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 11, 15, 11, 51, 54, 229, DateTimeKind.Local).AddTicks(2499),
                            Email = "zapata.devs@gmail.com",
                            Name = "Juan Jose",
                            Password = "$2a$11$Vt48m4OlQKYb4s/I8lM5hOEmrd0BodTFKfryfC0niLMFOyQwfO7gW",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 11, 15, 11, 51, 54, 350, DateTimeKind.Local).AddTicks(4086),
                            Email = "user@example.com",
                            Name = "Test",
                            Password = "$2a$11$GU4DASkDuPfqatIE1mJ8funnNkYpzS82RHK10fwT/jQ3jvfO66LpC",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.Doctor", b =>
                {
                    b.HasOne("assestment_JuaJoseZapata.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.DoctorAvailability", b =>
                {
                    b.HasOne("assestment_JuaJoseZapata.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.Patient", b =>
                {
                    b.HasOne("assestment_JuaJoseZapata.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("assestment_JuaJoseZapata.Models.User", b =>
                {
                    b.HasOne("assestment_JuaJoseZapata.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
